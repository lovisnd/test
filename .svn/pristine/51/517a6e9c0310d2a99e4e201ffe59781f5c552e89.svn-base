package com.tiankui.reactService.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.tiankui.reactService.entity.DateOrder;
import com.tiankui.reactService.entity.Dict;
import com.tiankui.reactService.entity.ErrorInfo;
import com.tiankui.reactService.entity.Result;
import com.tiankui.reactService.entity.ResultArray;
import com.tiankui.reactService.entity.TSyslog;
import com.tiankui.reactService.entity.WorkOrder;
import com.tiankui.reactService.enums.LogLevel;
import com.tiankui.reactService.enums.LogType;
import com.tiankui.reactService.service.ISyslogService;
import com.tiankui.reactService.service.IWorkOrderService;
import com.tiankui.reactService.util.CSVUtil;
import com.tiankui.reactService.util.ExcelUtils;
import com.tiankui.reactService.util.IPUtil;
import com.tiankui.reactService.util.LocalCache;
import com.tiankui.reactService.util.ObjectUtil;

/**
 * @author zhouao
 * @ClassName: WorkOrderController
 * @Description: TODO 工单处理接入层
 * @date 2018年7月30日
 */
@RestController
@RequestMapping("/api/workOrder")
public class WorkOrderController {
	//本地缓存KEY
	private static String KEY = "TT10086";
	@Autowired
	private IWorkOrderService workOrderService;

	@Autowired
	public ISyslogService syslogService;

	/**
	 * @param request
	 * @return Result<Integer> 返回类型
	 * @throws Exception
	 *             参数
	 * @Title: doImport
	 * @Description: TODO 工单信息导入
	 */
	@RequestMapping(value = "/upload", method = { RequestMethod.GET, RequestMethod.POST })
	public Result<List<ErrorInfo>> doImport(HttpServletRequest request, @RequestParam String token) {
		Result<List<ErrorInfo>> result = new Result<List<ErrorInfo>>();
		TSyslog tSyslog = new TSyslog();
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		InputStream in = null;
		MultipartFile file = multipartRequest.getFile("file");
		if (file.isEmpty()) {
			try {
				throw new Exception("文件不存在！");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {
			in = file.getInputStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		List<List<Object>> listob = null;
		if (file.getOriginalFilename().toString().endsWith(".csv")) {
			listob = CSVUtil.getBankListByCSV(in, file.getOriginalFilename());
		} else {
			listob = ExcelUtils.getBankListByExcel(in, file.getOriginalFilename());
		}
		try {
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		List<ErrorInfo> upload = new ArrayList<ErrorInfo>();
		try {
			upload = workOrderService.upload(listob, token, file.getOriginalFilename());
		} catch (Exception e) {
			tSyslog = new TSyslog(LogType.FILE_UPLOAD_FAIL.getIndex(), LogLevel.FATAL.getIndex(),
					file.getOriginalFilename() + "为非法文件！仅支持导入合法的10086工单文件！请检查！");
			result.setData(null);
			result.setStatus(-1);
			result.setMessage("为非法文件！仅支持导入10086工单文件！请检查！");
			syslogService.insert(tSyslog, token, IPUtil.getIpAdrress(request));
			return result;
		}
		if (upload.size() > 0) {
			tSyslog = new TSyslog(LogType.FILE_UPLOAD_FAIL.getIndex(), LogLevel.ERROR.getIndex(),
					file.getOriginalFilename() + "文件记录有错误！请检查！");
			result.setData(upload);
			result.setStatus(0);
			result.setMessage("文件记录有错误！请检查！");
		}
		if (upload.size() <= 0) {
			tSyslog = new TSyslog(LogType.FILE_UPLOAD_SUCCESS.getIndex(), LogLevel.INFO.getIndex(),
					file.getOriginalFilename() + "文件导入成功！");
			result.setStatus(1);
			result.setMessage("文件导入成功！");
		}
		syslogService.insert(tSyslog, token, IPUtil.getIpAdrress(request));
		return result;
	}

	/**
	 * @Title: list @Description: TODO 获取工单信息列表 @param map 参数 @return
	 *         Result<List<WorkOrder>> 返回类型 @throws
	 */
	@RequestMapping(value = "/list")
	public Result<List<WorkOrder>> list(HttpServletRequest request, @RequestParam String token,
			@RequestBody Map<String, Object> map) {
		Result<List<WorkOrder>> result = new Result<List<WorkOrder>>();
		List<WorkOrder> list = workOrderService.getListByMap(map);
		int count = workOrderService.getCountList(map);
		result.setData(list);
		result.setCount(count);
		result.setStatus(1);
		result.setMessage("查询成功！");
		TSyslog tSyslog = new TSyslog(LogType.DATA_QUERY_SUCCESS.getIndex(), LogLevel.INFO.getIndex(), "家客工单列表数据查询成功！");
		syslogService.insert(tSyslog, token, IPUtil.getIpAdrress(request));
		return result;
	}

	/**
	 * @param @param
	 *            id
	 * @param @return
	 *            参数
	 * @return ResultArray<User> 返回类型
	 * @throws @Title:
	 *             getGuestInfoById
	 * @Description: TODO 根据ID查询客户信息
	 */
	@RequestMapping(value = "/query")
	public ResultArray<WorkOrder> getWorkOrderById(@RequestParam String id) {
		WorkOrder order = workOrderService.getOrderById(id);
		ResultArray<WorkOrder> result = new ResultArray<WorkOrder>();
		result.setMessage("查询成功！");
		if (ObjectUtil.isNotNull(order)) {
			WorkOrder[] workOrders = { order };
			result.setData(workOrders);
			result.setStatus(1);
		} else {
			result.setData(null);
			result.setStatus(0);
		}
		return result;
	}

	/**
	 * @param @param
	 *            id
	 * @param @return
	 *            参数
	 * @return ResultArray<User> 返回类型
	 * @throws @Title:
	 *             getGuestInfoById
	 * @Description: TODO 根据ID查询客户信息
	 */
	@RequestMapping(value = "/queryDetail")
	public Result<Map<String, Object>> getOrderById(HttpServletRequest request, @RequestParam String token,
			@RequestParam String id) {
		TSyslog tSyslog = new TSyslog();
		Map<String, Object> orderMap = workOrderService.getWorkOrderById(id);
		Result<Map<String, Object>> result = new Result<Map<String, Object>>();
		result.setMessage("查询成功！");
		if (ObjectUtil.isNotNull(orderMap)) {
			result.setData(orderMap);
			result.setStatus(1);
			tSyslog = new TSyslog(LogType.DATA_QUERY_SUCCESS.getIndex(), LogLevel.INFO.getIndex(), "根据工单号查询家客工单数据成功！");
		} else {
			result.setData(null);
			result.setStatus(0);
			tSyslog = new TSyslog(LogType.DATA_QUERY_FAIL.getIndex(), LogLevel.ERROR.getIndex(), "根据工单号查询家客工单数据失败！");
		}
		syslogService.insert(tSyslog, token, IPUtil.getIpAdrress(request));
		return result;
	}

	/**
	 * 导出工单信息
	 *
	 * @param map
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/export")
	public void export(@RequestParam Map<String, Object> map, HttpServletRequest request,
			HttpServletResponse response) {
		String[] excelHeader = { "工单编号", "工单类型", "投诉号码", "上网账号", "客户名称", "客户家庭地址", "客户所在城市", "客户所在区县", "投诉内容", "工单创建时间",
				"接单时间--铁通", "最后一次回访时间", "投诉问题是否解决成功", "工单处理人-装维人员", "装维人员所在网格区域", "故障类型", "装维人员处理时长/min", "是否处理超时",
				"客调员-铁通", "工单状态", "外呼方式", "用户满意情况", "创建时间", "创建人" };
		String[] ds_titles = { "orderNo", "orderType", "complaintPhoneno", "internetAccount", "guestName",
				"guestAddress", "city", "area", "complaintContent", "orderCreateDate", "takeOrderDateTt",
				"lastReturnOrderDate", "isSuccess", "orderHandler", "handlerChangeArea", "faultType", "handleMin",
				"isTimeout", "intervenePerson", "orderStatus", "callOutWay", "isSatisfaction", "createDate",
				"creater" };
		int[] ds_format = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 7, 1 };
		int[] widths = { 256 * 30, 256 * 10, 256 * 15, 256 * 15, 256 * 15, 256 * 45, 256 * 15, 256 * 15, 256 * 60,
				256 * 20, 256 * 20, 256 * 20, 256 * 25, 256 * 20, 256 * 45, 256 * 15, 256 * 28, 256 * 15, 256 * 15,
				256 * 15, 256 * 15, 256 * 15, 256 * 20, 256 * 15 };
		List<Map<String, Object>> list = workOrderService.getList(map);
		try {
			ExcelUtils.export("工单信息表", "工单信息", excelHeader, ds_titles, ds_format, widths, list, request, response);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 删除工单信息
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/del")
	public Result<Integer> delOrder(HttpServletRequest request, @RequestParam String token, @RequestParam String id) {
		TSyslog tSyslog = new TSyslog();
		WorkOrder delOrder = workOrderService.getOrderById(id);
		int resultNum = workOrderService.delOrderId(id);
		Result<Integer> result = new Result<Integer>();
		if (resultNum == 1) {
			result.setData(resultNum);
			result.setStatus(1);
			result.setMessage("删除成功！");
			tSyslog = new TSyslog(LogType.DATA_DELETE_SUCCESS.getIndex(), LogLevel.INFO.getIndex(),
					"删除家客工单数据成功！被删除工单号：" + delOrder.getOrderNo());
		} else {
			result.setData(resultNum);
			result.setStatus(0);
			result.setMessage("删除失败！");
			tSyslog = new TSyslog(LogType.DATA_DELETE_FAIL.getIndex(), LogLevel.ERROR.getIndex(),
					"删除家客工单数据失败！被删除工单号：" + delOrder.getOrderNo());
		}
		syslogService.insert(tSyslog, token, IPUtil.getIpAdrress(request));
		return result;
	}

	/**
	 * 根据工单号查询工单个数
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/orderNo")
	public Result<Integer> getOrderNo(@RequestParam String id) {
		int num = workOrderService.getOrderNo(id);
		Result<Integer> result = new Result<Integer>();
		result.setData(num);
		result.setStatus(1);
		result.setMessage("查询成功！");
		return result;
	}

	/**
	 *
	 * @param map
	 * @param token
	 * @return
	 */
	@RequestMapping(value = "/add")
	public Result<Integer> addGuestInfo(HttpServletRequest request, @RequestBody Map<String, Object> map,
			@RequestParam String token) {
		TSyslog tSyslog = new TSyslog();
		Result<Integer> result = new Result<Integer>();
		map.put("token", token);
		int resultNum = workOrderService.addWorkOrder(map);
		result.setData(resultNum);
		if (resultNum == 1) {
			result.setStatus(1);
			result.setMessage("添加成功！");
			tSyslog = new TSyslog(LogType.DATA_ADD_SUCCESS.getIndex(), LogLevel.INFO.getIndex(),
					"添加家客工单数据成功！被添加工单号：" + map.get("orderNo"));
		} else {
			result.setStatus(0);
			result.setMessage("添加失败！");
			tSyslog = new TSyslog(LogType.DATA_ADD_FAIL.getIndex(), LogLevel.ERROR.getIndex(),
					"添加家客工单数据失败！被添加工单号：" + map.get("orderNo"));
		}
		syslogService.insert(tSyslog, token, IPUtil.getIpAdrress(request));
		LocalCache localCache = LocalCache.getInStance();
		localCache.setLocalCache(KEY,1000, null);
		return result;
	}

	/**
	 * 
	 * @Title: getAreas @Description: TODO 查询客户所在区域列表 @param @return 参数 @return
	 *         Result<String> 返回类型 @throws
	 */
	@RequestMapping(value = "/areas")
	public Result<List<Dict>> getAreas() {
		Result<List<Dict>> result = new Result<List<Dict>>();
		List<Dict> list = workOrderService.getAreaList();
		result.setData(list);
		result.setStatus(1);
		result.setMessage("查询成功！");
		return result;
	}

	/**
	 *
	 * @param map
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/edit")
	public Result<Integer> editGuestInfo(HttpServletRequest request, @RequestParam String token,@RequestParam String id, @RequestBody Map<String, Object> map) {
		TSyslog tSyslog = new TSyslog();
		int resultNum = workOrderService.updateWorkOrder(id, map);
		Result<Integer> result = new Result<Integer>();
		if (resultNum == 1) {
			result.setData(resultNum);
			result.setStatus(1);
			result.setMessage("修改成功！");
			tSyslog = new TSyslog(LogType.DATA_UPDATE_SUCCESS.getIndex(), LogLevel.INFO.getIndex(),
    				"修改家客工单数据成功！被修改的家客工单："+workOrderService.getOrderById(id).getOrderNo());
		} else {
			result.setData(resultNum);
			result.setStatus(0);
			result.setMessage("修改失败！");
			tSyslog = new TSyslog(LogType.DATA_UPDATE_FAIL.getIndex(), LogLevel.ERROR.getIndex(),
    				"修改家客工单数据失败！被修改的家客工单："+workOrderService.getOrderById(id).getOrderNo());
		}
		syslogService.insert(tSyslog,token,IPUtil.getIpAdrress(request));
		return result;
	}

	/**
	 * 查询TT10086工单个数
	 */
	@RequestMapping(value = "/queryTT10086Count")
	public Result<List<DateOrder>> queryTT10086Count() {
		LocalCache localCache = LocalCache.getInStance();
		Result<List<DateOrder>> result = localCache.getLocalCache(KEY);
		
		if (ObjectUtil.isNull(result)) {
			// 从db或cache获取数据
			// 设置本地缓存,生效时间为10分钟
			List<DateOrder> list = workOrderService.queryDateOrder();
			Map<String, Object> map = new HashMap<String, Object>();
			int count = workOrderService.getCountList(map);
			result = new Result<List<DateOrder>>();
			result.setData(list);
			result.setStatus(1);
			result.setCount(count);
			result.setMessage("查询成功！");
			localCache.setLocalCache(KEY, 1000 * 60 * 10, result);
		}
		return result;
	}
	
	/**
	 * 导入模板下载
	 * @Title: download
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @param @param request
	 * @param @param response
	 * @param @return    参数
	 * @return String    返回类型
	 * @throws
	 */
	@RequestMapping("/exportTable")
	public String download(HttpServletRequest request, HttpServletResponse response) {

		response.setContentType("text/html;charset=utf-8");
		try {
			request.setCharacterEncoding("UTF-8");
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}

		java.io.BufferedInputStream bis = null;
		java.io.BufferedOutputStream bos = null;

		String downLoadPath = this.getClass().getClassLoader().getResource("/").getPath() + "/file/10086工单信息模板.xlsx"; // 注意不同系统的分隔符
		try {
			long fileLength = new File(downLoadPath).length();
			response.setContentType("application/x-msdownload;");
			response.setHeader("Content-disposition",
					"attachment; filename=" + new String("10086工单信息模板.xlsx".getBytes("utf-8"), "ISO8859-1"));
			response.setHeader("Content-Length", String.valueOf(fileLength));
			bis = new BufferedInputStream(new FileInputStream(downLoadPath));
			bos = new BufferedOutputStream(response.getOutputStream());
			byte[] buff = new byte[2048];
			int bytesRead;
			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
				bos.write(buff, 0, bytesRead);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bis != null)
				try {
					bis.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			if (bos != null)
				try {
					bos.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
		return null;
	}

}
