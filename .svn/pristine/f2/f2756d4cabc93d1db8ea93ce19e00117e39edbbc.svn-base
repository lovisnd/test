package com.tiankui.reactService.util;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 
 * 工具类
 * 
 * @version 1.0
 * @since JDK1.7
 */
public class ObjectUtil {
	private static final String JAVAP = "java.";
	private static final String JAVADATESTR = "java.util.Date";

	/**
	 * 
	 * 方法描述 如果对象为非空返回true 否则返回false
	 * 
	 * @param obj
	 * @return
	 */
	public static boolean isNotNull(Object obj) {
		if (obj != null && obj != "") {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * 方法描述 如果对象为空返回 true 否则返回false
	 * 
	 * @param obj
	 * @return
	 */
	public static boolean isNull(Object obj) {
		if (obj != null && obj != "") {
			return false;
		}
		return true;
	}

	/**
	 * 
	 * 方法描述 判断Map集合非null 非空 返回true 否则返回false
	 * 
	 * @param list
	 * @return
	 */
	public static boolean isNotNull(Map<Object, Object> map) {
		if (map != null && !map.isEmpty()) {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * 方法描述 判断Map集合是null或者空 返回true 否则返回false
	 * 
	 * @param list
	 * @return
	 */
	public static boolean isNull(Map<Object, Object> map) {
		if (map == null || map.isEmpty()) {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * 方法描述 判断Map集合非null 非空 返回true 否则返回false
	 * 
	 * @param list
	 * @return
	 */
	public static boolean isNotNull(List<Object> list) {
		if (list != null && !list.isEmpty()) {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * 方法描述 判断Map集合是null或者空 返回true 否则返回false
	 * 
	 * @param list
	 * @return
	 */
	public static boolean isNull(List<Object> list) {
		if (list == null || list.isEmpty()) {
			return true;
		}
		return false;
	}

	/**
	 * 获取利用反射获取类里面的值和名称
	 *
	 * @param obj
	 * @return
	 * @throws IllegalAccessException
	 */
	public static Map<String, Object> objectToMap(Object obj) {
		Map<String, Object> map = new HashMap<String, Object>();
		Class<?> clazz = obj.getClass();
		for (Field field : clazz.getDeclaredFields()) {
			field.setAccessible(true);
			String fieldName = field.getName();
			Object value;
			try {
				value = field.get(obj);
				map.put(fieldName, value);
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		return map;
	}

	/**
	 * 利用递归调用将Object中的值全部进行获取
	 *
	 * @param timeFormatStr
	 *            格式化时间字符串默认<strong>2017-03-10 10:21</strong>
	 * @param obj
	 *            对象
	 * @param excludeFields
	 *            排除的属性
	 * @return
	 * @throws IllegalAccessException
	 */
	public static Map<String, String> objectToMapString(String timeFormatStr, Object obj, String... excludeFields)
			throws IllegalAccessException {
		Map<String, String> map = new HashMap<String, String>();

		if (excludeFields.length != 0) {
			List<String> list = Arrays.asList(excludeFields);
			objectTransfer(timeFormatStr, obj, map, list);
		} else {
			objectTransfer(timeFormatStr, obj, map, null);
		}
		return map;
	}

	/**
	 * 递归调用函数
	 *
	 * @param obj
	 *            对象
	 * @param map
	 *            map
	 * @param excludeFields
	 *            对应参数
	 * @return
	 * @throws IllegalAccessException
	 */
	private static Map<String, String> objectTransfer(String timeFormatStr, Object obj, Map<String, String> map,
			List<String> excludeFields) throws IllegalAccessException {
		boolean isExclude = false;
		// 默认字符串
		String formatStr = "YYYY-MM-dd HH:mm:ss";
		// 设置格式化字符串
		if (timeFormatStr != null && !timeFormatStr.isEmpty()) {
			formatStr = timeFormatStr;
		}
		if (excludeFields != null) {
			isExclude = true;
		}
		Class<?> clazz = obj.getClass();
		// 获取值
		for (Field field : clazz.getDeclaredFields()) {
			String fieldName = clazz.getSimpleName() + "." + field.getName();
			// 判断是不是需要跳过某个属性
			if (isExclude && excludeFields.contains(fieldName)) {
				continue;
			}
			// 设置属性可以被访问
			field.setAccessible(true);
			Object value = field.get(obj);
			Class<?> valueClass = value.getClass();
			if (valueClass.isPrimitive()) {
				map.put(fieldName, value.toString());

			} else if (valueClass.getName().contains(JAVAP)) {// 判断是不是基本类型
				if (valueClass.getName().equals(JAVADATESTR)) {
					// 格式化Date类型
					SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
					Date date = (Date) value;
					String dataStr = sdf.format(date);
					map.put(fieldName, dataStr);
				} else {
					map.put(fieldName, value.toString());
				}
			} else {
				objectTransfer(timeFormatStr, value, map, excludeFields);
			}
		}
		return map;
	}
	
	public static Object mapToObject(Map<String, Object> map, Class<?> beanClass) throws Exception {    
        if (map == null)  
            return null;    
  
        Object obj = beanClass.newInstance();  
  
        Field[] fields = obj.getClass().getDeclaredFields();   
        for (Field field : fields) {    
            int mod = field.getModifiers();    
            if(Modifier.isStatic(mod) || Modifier.isFinal(mod)){    
                continue;    
            }    
  
            field.setAccessible(true);    
            field.set(obj, map.get(field.getName()));   
        }   
  
        return obj;    
    }  
}