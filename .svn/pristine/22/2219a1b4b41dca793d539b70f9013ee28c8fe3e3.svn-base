<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tiankui.reactService.mapper.DeptMapper" >
  <resultMap id="BaseResultMap" type="com.tiankui.reactService.entity.Dept" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="parentId" property="parentId" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="sort" property="sort" jdbcType="INTEGER" />
    <result column="deleted" property="deleted" jdbcType="INTEGER" />
    <result column="createTime" property="createTime" jdbcType="BIGINT" />
    <result column="updateTime" property="updateTime" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
  	id, parentId, name, code, description, sort, deleted, createTime, updateTime
  </sql>
 
  <select id="getListByExample" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select <include refid="Base_Column_List" />
    from t_s_dept
  </select>
  
   <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.tiankui.reactService.entity.TMenuExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_s_dept
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select> 
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_s_dept
    where id = #{id,jdbcType=VARCHAR}
  </select>
 
  <update id="updateDept" parameterType="java.util.Map">
  	update 
  	t_s_dept set name = #{name},description = #{description}
  	<if test="parentId !=null and parentId != ''">
  		,parentId = #{parentId}
  	</if>
  	 where id = #{id}
  </update>
  
  <select id="getSortByParentId" parameterType="java.lang.String" resultType="java.lang.Integer">
  	select max(sort) from t_s_dept where parentId = #{parentId}
  </select>
  
  <select id="getCodeByParentId" parameterType="java.lang.String" resultType="java.lang.String">
  	select * from (select CODE from T_S_DEPT where PARENTID = #{parentId} order by CODE desc) where ROWNUM =1
  </select>
  
  <select id="getCodeById" parameterType="java.lang.String" resultType="java.lang.String">
  	select CODE from T_S_DEPT where ID = #{parentId}
  </select>
  
  <select id="getCodeByNullId" resultType="java.lang.String">
  	select * from (select code from T_S_DEPT where PARENTID is null order by CODE desc) where ROWNUM =1
  </select>
  
  <insert id="insertDept" parameterType="java.util.Map">
  	insert into t_s_dept (id,parentId,name,code,description,sort,createTime)
  	values (#{id},#{parentId},#{name},#{code},#{description},#{sort},#{createTime})
  </insert>
  
  <delete id="delDept" parameterType="java.lang.String">
  	delete from t_s_dept where id = #{id}
  </delete>
  
  <select id="getListByParentId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/> from t_s_dept where PARENTID = #{id}
  </select>

</mapper>