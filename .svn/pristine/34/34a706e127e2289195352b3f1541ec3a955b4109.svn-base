package com.tiankui.reactService.service.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.tiankui.reactService.entity.DateOrder;
import com.tiankui.reactService.entity.Dict;
import com.tiankui.reactService.entity.DictGroup;
import com.tiankui.reactService.entity.ErrorInfo;
import com.tiankui.reactService.entity.TSyslog;
import com.tiankui.reactService.entity.User;
import com.tiankui.reactService.entity.WorkOrder;
import com.tiankui.reactService.enums.LogLevel;
import com.tiankui.reactService.enums.LogType;
import com.tiankui.reactService.mapper.DictGroupMapper;
import com.tiankui.reactService.mapper.UserMapper;
import com.tiankui.reactService.mapper.WorkOrderMapper;
import com.tiankui.reactService.service.ISyslogService;
import com.tiankui.reactService.service.IWorkOrderService;
import com.tiankui.reactService.util.LoginUserCache;
import com.tiankui.reactService.util.ObjectUtil;
import com.tiankui.reactService.util.UUIDUtil;

/**
 * @author zhouao
 * @ClassName: WorkOrderService
 * @Description: TODO 工单处理逻辑处理实现层
 * @date 2018年7月30日
 */
@Service
public class WorkOrderService implements IWorkOrderService {

	private static Logger logger = Logger.getLogger(WorkOrderService.class);
	@Autowired
	public ISyslogService syslogService;

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

	@Autowired
	private DictGroupMapper dictGroupMapper;

	@Autowired
	private UserMapper userMapper;

	@Autowired
	private WorkOrderMapper workOrderMapper;

	@Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED)
	@Override
	public List<ErrorInfo> upload(List<List<Object>> listob, String token, String filename) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		User user = userMapper.getTokenUser(token);
		List<WorkOrder> allList = new ArrayList<WorkOrder>();
		for (int i = 0; i < listob.size(); i++) {
			List<Object> lo = listob.get(i);
			WorkOrder wo = new WorkOrder();
			wo.setId(UUIDUtil.getUUID());
			wo.setCreater(user.getName());
			wo.setCreateDate(new Date().getTime());
			wo.setOrderNo(String.valueOf(lo.get(33)));
			wo.setOrderType(2);
			wo.setComplaintPhoneno(String.valueOf(lo.get(19)));
			wo.setInternetAccount(String.valueOf(lo.get(4)));
			wo.setGuestName(String.valueOf(lo.get(5)));
			wo.setGuestAddress(String.valueOf(lo.get(6)));
			wo.setCity(String.valueOf(lo.get(0)));
			wo.setArea(getAreas(String.valueOf(lo.get(1))));
			wo.setComplaintContent(String.valueOf(lo.get(10)));
			wo.setTakeOrderDateTt(0l);
			wo.setIsSuccess(Double.valueOf(lo.get(46).toString()) > 24.00 ? 2 : 1);
			try {
				wo.setOrderCreateDate(
						"".equals(String.valueOf(lo.get(11))) ? 0 : sdf.parse(String.valueOf(lo.get(11))).getTime());
				wo.setLastReturnOrderDate(
						"".equals(String.valueOf(lo.get(12))) ? 0 : sdf.parse(String.valueOf(lo.get(12))).getTime());
			} catch (ParseException e) {
				e.printStackTrace();
			}
			wo.setOrderHandler(String.valueOf(lo.get(42)));
			wo.setHandlerChangeArea(String.valueOf(lo.get(36)));
			wo.setFaultType(getFaultType(String.valueOf(lo.get(43))));
			wo.setHandleMin((int) (Double.valueOf(lo.get(45).toString()) * 60));
			wo.setIsTimeout(isTimeOut(String.valueOf(lo.get(34))));
			wo.setIntervenePerson("");
			wo.setCallOutWay(2);
			wo.setOrderStatus(getOrderStatus(String.valueOf(lo.get(31))));
			wo.setIsSatisfaction(getSatisfaction(String.valueOf(lo.get(20)) + String.valueOf(lo.get(21))));
			allList.add(wo);
		}
		List<ErrorInfo> errorList = new ArrayList<ErrorInfo>();
		errorList = checkData(filename, allList);
		List<WorkOrder> repeatList = repeatData(filename, allList);
		// 判断是否有错误数据，若有则停止导入
		if (errorList.size() <= 0) {
			logger.error("开始导入");
			long currentTime = System.currentTimeMillis();
			if (repeatList.size() > 0) {
				int batchNum = updateBatch(repeatList);
				logger.error("总共更新" + repeatList.size() + "条，插入了" + batchNum + "批");
				allList.removeAll(repeatList);
			}
			if (allList.size() > 0) {
				int count = allList.size();
				int batchNum = insertBatch(allList);
				long endTime = System.currentTimeMillis();
				logger.error("总共插入" + count + "条，插入了" + batchNum + "批。用时【" + (endTime - currentTime) + "ms】");
			}
		}
		return errorList;
	}

	/**
	 * 查询10086工单区域类型Code @Title: getAreas @Description:
	 * TODO(这里用一句话描述这个方法的作用) @param @param string @param @return 参数 @return
	 * String 返回类型 @throws
	 */
	private String getAreas(String string) {
		String area = "其他";
		List<Dict> areaList = dictGroupMapper.selectByPrimaryKey("078457f1e9f64c4ebeb7c08c3b66e08c");
		for (Dict dict : areaList) {
			if (string.contains(dict.getName())) {
				area = dict.getDictCode();
			}
		}
		return area;
	}

	/**
	 * 查询10086工单区域类型Code @Title: getAreas @Description:
	 * TODO(这里用一句话描述这个方法的作用) @param @param string @param @return 参数 @return
	 * String 返回类型 @throws
	 */
	private String getTTAreas(String string) {
		String area = "其他";
		List<Dict> areaList = dictGroupMapper.selectByPrimaryKey("0ba28352ce624d43a244cba5c827f2b4");
		for (Dict dict : areaList) {
			if (string.contains(dict.getName())) {
				area = dict.getDictCode();
			}
		}
		return area;
	}

	/**
	 * @Title: repeatData @Description: TODO 获取工单号重复的数据 @param @param
	 *         filename @param @param allList @param @return 参数 @return
	 *         List<WorkOrder> 返回类型 @throws
	 */
	private List<WorkOrder> repeatData(String filename, List<WorkOrder> allList) {
		ArrayList<WorkOrder> repeatList = new ArrayList<WorkOrder>();
		for (WorkOrder workOrder : allList) {
			WorkOrder order = workOrderMapper.getOrderByOrderNo(workOrder.getOrderNo());
			if (order != null) {
				repeatList.add(workOrder);
			}
		}
		return repeatList;
	}

	@Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED)
	@Override
	public void ttWorkOrderInsert(String fileSrc, List<List<Object>> listob) {
		TSyslog tSyslog = new TSyslog();
		List<WorkOrder> allList = new ArrayList<WorkOrder>();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		for (int i = 0; i < listob.size(); i++) {
			List<Object> lo = listob.get(i);
			WorkOrder wo = new WorkOrder();
			wo.setId(UUIDUtil.getUUID());
			wo.setCreater("系统导入");
			wo.setCreateDate(new Date().getTime());
			wo.setCity(String.valueOf(lo.get(0)));
			wo.setArea(getTTAreas(String.valueOf(lo.get(1))));
			wo.setIsTimeout(isTimeOut(String.valueOf(lo.get(2))));
			wo.setIsSuccess("超时".equals(String.valueOf(lo.get(2))) ? 2 : 1);
			wo.setOrderNo(String.valueOf(lo.get(3)));
			wo.setInternetAccount(String.valueOf(lo.get(4)));
			wo.setOrderType(1);
			try {
				wo.setOrderCreateDate(
						"".equals(String.valueOf(lo.get(6))) ? 0 : sdf.parse(String.valueOf(lo.get(6))).getTime());
				wo.setTakeOrderDateTt(
						"".equals(String.valueOf(lo.get(14))) ? 0 : sdf.parse(String.valueOf(lo.get(14))).getTime());
				if ("".equals(String.valueOf(lo.get(16)))) {
					wo.setLastReturnOrderDate(0l);
					wo.setHandleMin(0);
				} else {
					wo.setLastReturnOrderDate(sdf.parse(String.valueOf(lo.get(16))).getTime());
					long ss = sdf.parse(String.valueOf(lo.get(16))).getTime()
							- sdf.parse(String.valueOf(lo.get(14))).getTime();
					wo.setHandleMin((int) (ss / (1000 * 60)));
				}
			} catch (ParseException e) {
				e.printStackTrace();
			}
			wo.setGuestName(ObjectUtil.isNotNull(String.valueOf(lo.get(7))) ? String.valueOf(lo.get(7)) : "");
			wo.setGuestAddress(String.valueOf(lo.get(8)));
			wo.setComplaintPhoneno(String.valueOf(lo.get(9)));
			wo.setComplaintContent(String.valueOf(lo.get(10)));
			wo.setOrderHandler(String.valueOf(lo.get(23)));
			wo.setFaultType(getFaultType(String.valueOf(lo.get(11))));
			wo.setIntervenePerson(ObjectUtil.isNotNull(String.valueOf(lo.get(16))) ? String.valueOf(lo.get(16)) : "");
			wo.setCallOutWay(getCallOutWay(String.valueOf(lo.get(19))));
			wo.setIsSatisfaction(getSatisfaction(String.valueOf(lo.get(20))));
			wo.setHandlerChangeArea("");
			wo.setOrderStatus(getOrderStatus(String.valueOf(lo.get(22))));
			allList.add(wo);
		}
		List<ErrorInfo> errorList = checkData(fileSrc, allList);
		List<WorkOrder> repeatList = repeatData(fileSrc, allList);
		if (errorList.size() > 0) {
			tSyslog = new TSyslog(LogType.FILE_UPLOAD_FAIL.getIndex(), LogLevel.ERROR.getIndex(),
					fileSrc + "文件记录有错误！请检查！");
			syslogService.insert(tSyslog,null,null);
			return;
		}
		if (repeatList.size() > 0) {
			updateBatch(repeatList);
			logger.error("已发现" + repeatList.size() + "条订单号重复的数据！数据已更新");
			allList.removeAll(repeatList);
		}
		if (allList.size() > 0) {
			insertBatch(allList);
			tSyslog = new TSyslog(LogType.FILE_UPLOAD_SUCCESS.getIndex(), LogLevel.INFO.getIndex(),
					fileSrc + "文件导入成功！");
		}
		syslogService.insert(tSyslog,null,null);
	}

	@Override
	public List<WorkOrder> getListByMap(Map<String, Object> map) {
		if (ObjectUtil.isNotNull(map.get("orderNo"))) {
			map.put("orderNo", "%" + map.get("orderNo") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("guestName"))) {
			map.put("guestName", "%" + map.get("guestName") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("complaintPhoneno"))) {
			map.put("complaintPhoneno", "%" + map.get("complaintPhoneno") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("guestAddress"))) {
			map.put("guestAddress", "%" + map.get("guestAddress") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("start"))) {
			int start = Integer.valueOf(map.get("start").toString());
			int limit = Integer.valueOf(map.get("limit").toString());
			map.put("start", start + 1);
			map.put("limit", limit + start);
		}
		List<WorkOrder> list = workOrderMapper.getListByMap(map);
		for (WorkOrder workOrder : list) {
			String name = dictGroupMapper.getDictByCode(workOrder.getFaultType());
			if (ObjectUtil.isNotNull(name)) {
				workOrder.setFaultType(name);
			} else {
				workOrder.setFaultType("其他故障");
			}
		}
		return list;
	}

	/**
	 * 数据校验的方法
	 *
	 * @param allList
	 */
	private List<ErrorInfo> checkData(String fileName, List<WorkOrder> allList) {
		List<ErrorInfo> errorList = new ArrayList<ErrorInfo>();
		for (int i = 0; i < allList.size(); i++) {
			int indexOf = i + 2;
			if (ObjectUtil.isNull(allList.get(i).getFaultType())) {
				ErrorInfo errorMessage = new ErrorInfo();
				errorMessage.setMessage("第" + indexOf + "行数据校验失败，故障类型为空！");
				errorList.add(errorMessage);
				logger.error(fileName + "，第" + indexOf + "行数据校验失败，故障类型为空！");
			}
			if (ObjectUtil.isNull(allList.get(i).getArea())) {
				ErrorInfo errorMessage = new ErrorInfo();
				errorMessage.setMessage("第" + indexOf + "行数据校验失败，故障区域为空！");
				errorList.add(errorMessage);
				logger.error(fileName + "，第" + indexOf + "行数据校验失败，故障区域为空！");
			}
			if (ObjectUtil.isNull(allList.get(i).getHandleMin())) {
				ErrorInfo errorMessage = new ErrorInfo();
				errorMessage.setMessage("第" + indexOf + "行数据校验失败，故障未处理！");
				errorList.add(errorMessage);
				logger.error(fileName + "，第" + indexOf + "行数据校验失败，故障未处理！");
			}
			if (ObjectUtil.isNull(allList.get(i).getIsSuccess())) {
				ErrorInfo errorMessage = new ErrorInfo();
				errorMessage.setMessage("第" + indexOf + "行数据校验失败，故障未成功处理！");
				errorList.add(errorMessage);
				logger.error(fileName + "，第" + indexOf + "行数据校验失败，故障未成功处理！");
			}
			if (ObjectUtil.isNull(allList.get(i).getComplaintPhoneno())) {
				ErrorInfo errorMessage = new ErrorInfo();
				errorMessage.setMessage("第" + indexOf + "行数据校验失败，投诉号码为空！");
				errorList.add(errorMessage);
				logger.error(fileName + "，第" + indexOf + "行数据校验失败，投诉号码为空！");
			}
			if (ObjectUtil.isNull(allList.get(i).getOrderHandler())) {
				ErrorInfo errorMessage = new ErrorInfo();
				errorMessage.setMessage("第" + indexOf + "行数据校验失败，装维人员为空！");
				errorList.add(errorMessage);
				logger.error(fileName + "，第" + indexOf + "行数据校验失败，装维人员为空！");
			}
		}
		return errorList;
	}

	@Override
	public List<Map<String, Object>> getList(Map<String, Object> map) {
		if (ObjectUtil.isNotNull(map.get("orderNo"))) {
			map.put("orderNo", "%" + map.get("orderNo") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("guestName"))) {
			map.put("guestName", "%" + map.get("guestName") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("complaintPhoneno"))) {
			map.put("complaintPhoneno", "%" + map.get("complaintPhoneno") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("guestAddress"))) {
			map.put("guestAddress", "%" + map.get("guestAddress") + "%");
		}
		List<WorkOrder> list = workOrderMapper.getList(map);
		List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>();
		for (WorkOrder user : list) {
			Map<String, Object> toMap = convertField(user);
			mapList.add(toMap);
		}
		return mapList;
	}

	@Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED)
	@Override
	public int delOrderId(String id) {
		return workOrderMapper.detele(id);
	}

	@Override
	public int getOrderNo(String orderNo) {
		int result = 0;
		WorkOrder order = workOrderMapper.getOrderByOrderNo(orderNo);
		if (ObjectUtil.isNotNull(order)) {
			result = 1;
		}
		return result;
	}

	@Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED)
	@Override
	public int addWorkOrder(Map<String, Object> map) {
		WorkOrder workOrder = new WorkOrder();
		if (ObjectUtil.isNotNull(map.get("orderNo"))) {
			workOrder.setOrderNo(map.get("orderNo").toString());
		}
		if (ObjectUtil.isNotNull(map.get("orderType"))) {
			workOrder.setOrderType(Integer.valueOf(map.get("orderType").toString()));
		}
		if (ObjectUtil.isNotNull(map.get("complaintPhoneno"))) {
			workOrder.setComplaintPhoneno(map.get("complaintPhoneno").toString());
		}
		if (ObjectUtil.isNotNull(map.get("internetAccount"))) {
			workOrder.setInternetAccount(map.get("internetAccount").toString());
		}
		if (ObjectUtil.isNotNull(map.get("orderCreateDate"))) {
			try {
				workOrder.setOrderCreateDate(sdf2.parse(String.valueOf(map.get("orderCreateDate"))).getTime());
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			workOrder.setOrderCreateDate(0l);
		}
		if (ObjectUtil.isNotNull(map.get("takeOrderDateTt"))) {
			try {
				workOrder.setTakeOrderDateTt(sdf2.parse(String.valueOf(map.get("takeOrderDateTt"))).getTime());
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			workOrder.setTakeOrderDateTt(0l);
		}
		if (ObjectUtil.isNotNull(map.get("lastReturnOrderDate"))) {
			try {
				workOrder.setLastReturnOrderDate(sdf2.parse(String.valueOf(map.get("lastReturnOrderDate"))).getTime());
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			workOrder.setLastReturnOrderDate(0l);
		}
		if (ObjectUtil.isNotNull(map.get("guestName"))) {
			workOrder.setGuestName(map.get("guestName").toString());
		} else {
			workOrder.setGuestName("");
		}
		if (ObjectUtil.isNotNull(map.get("city"))) {
			workOrder.setCity(map.get("city").toString());
		} else {
			workOrder.setCity("");
		}
		if (ObjectUtil.isNotNull(map.get("guestAddress"))) {
			workOrder.setGuestAddress(map.get("guestAddress").toString());
		} else {
			workOrder.setGuestAddress("");
		}
		if (ObjectUtil.isNotNull(map.get("isSuccess"))) {
			workOrder.setIsSuccess(Integer.valueOf(map.get("isSuccess").toString()));
		} else {
			workOrder.setIsSuccess(0);
		}
		if (ObjectUtil.isNotNull(map.get("isTimeOut"))) {
			workOrder.setIsTimeout(Integer.valueOf(map.get("isTimeOut").toString()));
		} else {
			workOrder.setIsTimeout(0);
		}
		if (ObjectUtil.isNotNull(map.get("isSatisfaction"))) {
			workOrder.setIsSatisfaction(Integer.valueOf(map.get("isSatisfaction").toString()));
		} else {
			workOrder.setIsSatisfaction(0);
		}
		if (ObjectUtil.isNotNull(map.get("orderStatus"))) {
			workOrder.setOrderStatus(Integer.valueOf(map.get("orderStatus").toString()));
		}
		if (ObjectUtil.isNotNull(map.get("callOutWay"))) {
			workOrder.setCallOutWay(Integer.valueOf(map.get("callOutWay").toString()));
		} else {
			workOrder.setCallOutWay(0);
		}
		if (ObjectUtil.isNotNull(map.get("area"))) {
			workOrder.setArea(map.get("area").toString());
		}
		if (ObjectUtil.isNotNull(map.get("orderHandler"))) {
			User user2 = userMapper.getUserById(map.get("orderHandler").toString());
			workOrder.setOrderHandler(user2.getName());
		}
		if (ObjectUtil.isNotNull(map.get("faultType"))) {
			workOrder.setFaultType(map.get("faultType").toString());
		}
		if (ObjectUtil.isNotNull(map.get("complaintContent"))) {
			workOrder.setComplaintContent(map.get("complaintContent").toString());
		} else {
			workOrder.setComplaintContent("");
		}
		if (1 == workOrder.getOrderType()) {
			if (workOrder.getTakeOrderDateTt() == 0 || workOrder.getLastReturnOrderDate() == 0) {
				workOrder.setHandleMin(0);
				workOrder.setIsTimeout(1);
			} else {
				long start = workOrder.getTakeOrderDateTt();
				long end = workOrder.getLastReturnOrderDate();
				long ss = end - start;
				workOrder.setHandleMin((int) (ss / (1000 * 60)));
			}
			if (ObjectUtil.isNotNull(map.get("intervenePerson"))) {
				workOrder.setIntervenePerson(map.get("takeOrderDateTt").toString());
			} else {
				workOrder.setIntervenePerson("");
			}
			workOrder.setHandlerChangeArea("");
		}
		if (2 == workOrder.getOrderType()) {
			User user2 = userMapper.getUserById(map.get("orderHandler").toString());
			workOrder.setHandlerChangeArea(user2.getDeptName());
			if (ObjectUtil.isNotNull(map.get("handleMin"))) {
				workOrder.setHandleMin(Integer.valueOf(map.get("handleMin").toString()));
			} else {
				workOrder.setHandleMin(0);
			}
			workOrder.setIntervenePerson("");
		}
		workOrder.setId(UUIDUtil.getUUID());
		workOrder.setCreater(LoginUserCache.get(map.get("token").toString()).getName());
		workOrder.setCreateDate(new Date().getTime());
		return workOrderMapper.save(workOrder);
	}

	@Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED)
	@Override
	public int updateWorkOrder(String id, Map<String, Object> map) {
		map.put("id", id);
		if (ObjectUtil.isNotNull(map.get("orderCreateDate"))) {
			try {
				map.put("orderCreateDate", (sdf2.parse(String.valueOf(map.get("orderCreateDate"))).getTime()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			map.put("orderCreateDate", 0l);
		}
		if (ObjectUtil.isNotNull(map.get("takeOrderDateTt"))) {
			try {
				map.put("takeOrderDateTt", (sdf2.parse(String.valueOf(map.get("takeOrderDateTt"))).getTime()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			map.put("takeOrderDateTt", 0l);
		}
		if (ObjectUtil.isNotNull(map.get("lastReturnOrderDate"))) {
			try {
				map.put("lastReturnOrderDate", (sdf2.parse(String.valueOf(map.get("lastReturnOrderDate"))).getTime()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			map.put("lastReturnOrderDate", 0l);
		}
		if (ObjectUtil.isNotNull(map.get("orderType"))) {
			if (1 == Integer.parseInt(map.get("orderType").toString())) {
				long start = Long.valueOf(map.get("takeOrderDateTt").toString());
				long end = Long.valueOf(map.get("lastReturnOrderDate").toString());
				long ss = end - start;
				map.put("handleMin", (int) (ss / (1000 * 60)));
				map.put("handlerChangeArea", "");
			}
			if (2 == Integer.parseInt(map.get("orderType").toString())) {
				User user2 = userMapper.getUserById(map.get("orderHandler").toString());
				map.put("handlerChangeArea", user2.getDeptName());
				if (ObjectUtil.isNotNull(map.get("handleMin"))) {
					map.put("handleMin", (Integer.valueOf(map.get("handleMin").toString())));
				} else {
					map.put("handleMin", 0);
				}
				map.put("intervenePerson", "");
			}
		}
		if (ObjectUtil.isNotNull(map.get("guestName"))) {
			map.put("guestName", map.get("guestName").toString());
		} else {
			map.put("guestName", "");
		}
		if (ObjectUtil.isNotNull(map.get("city"))) {
			map.put("city", map.get("city").toString());
		} else {
			map.put("city", "");
		}
		if (ObjectUtil.isNotNull(map.get("guestAddress"))) {
			map.put("guestAddress", map.get("guestAddress").toString());
		} else {
			map.put("guestAddress", "");
		}
		if (ObjectUtil.isNotNull(map.get("complaintContent"))) {
			map.put("complaintContent", map.get("complaintContent").toString());
		} else {
			map.put("complaintContent", "");
		}
		return workOrderMapper.update(map);
	}

	/**
	 * 更改字段含义使用户看得懂
	 * 
	 * @param user
	 * @return
	 */
	private Map<String, Object> convertField(WorkOrder user) {
		Map<String, Object> toMap = ObjectUtil.objectToMap(user);
		toMap.put("orderType", Integer.valueOf(toMap.get("orderType").toString()) == 1 ? "铁通工单" : "10086工单");
		if (ObjectUtil.isNotNull(toMap.get("orderStatus"))) {
			if (Integer.valueOf(toMap.get("orderStatus").toString()) == 1) {
				toMap.put("orderStatus", "已归档");
			} else if (Integer.valueOf(toMap.get("orderStatus").toString()) == 2) {
				toMap.put("orderStatus", "未归档");
			} else {
				toMap.put("orderStatus", "");
			}
		}
		if (ObjectUtil.isNotNull(toMap.get("callOutWay"))) {
			if (Integer.valueOf(toMap.get("callOutWay").toString()) == 1) {
				toMap.put("callOutWay", "未外呼");
			} else if (Integer.valueOf(toMap.get("callOutWay").toString()) == 2) {
				toMap.put("callOutWay", "自动外呼");
			} else if (Integer.valueOf(toMap.get("callOutWay").toString()) == 3) {
				toMap.put("callOutWay", "esales外呼");
			} else if (Integer.valueOf(toMap.get("callOutWay").toString()) == 4) {
				toMap.put("callOutWay", "客服电话回访");
			} else {
				toMap.put("callOutWay", "");
			}
		}
		if (ObjectUtil.isNotNull(toMap.get("isSatisfaction"))) {
			if (Integer.valueOf(toMap.get("isSatisfaction").toString()) == 1) {
				toMap.put("isSatisfaction", "很满意（问题已经解决）");
			} else if (Integer.valueOf(toMap.get("isSatisfaction").toString()) == 2) {
				toMap.put("isSatisfaction", "不满意（问题已经解决）");
			} else if (Integer.valueOf(toMap.get("isSatisfaction").toString()) == 3) {
				toMap.put("isSatisfaction", "不满意（问题未解决）");
			} else {
				toMap.put("isSatisfaction", "");
			}
		}
		if (ObjectUtil.isNotNull(toMap.get("faultType"))) {
			String name = dictGroupMapper.getDictByCode(toMap.get("faultType").toString());
			if (ObjectUtil.isNotNull(name)) {
				toMap.put("faultType", name);
			} else {
				toMap.put("faultType", "其他故障");
			}
		}
		return toMap;
	}

	@Override
	public int getCountList(Map<String, Object> map) {
		if (ObjectUtil.isNotNull(map.get("orderNo"))) {
			map.put("orderNo", "%" + map.get("orderNo") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("guestName"))) {
			map.put("guestName", "%" + map.get("guestName") + "%");
		}
		if (ObjectUtil.isNotNull(map.get("guestAddress"))) {
			map.put("guestAddress", "%" + map.get("guestAddress") + "%");
		}
		int count = workOrderMapper.getCountListByMap(map);
		return count;
	}

	/**
	 * 工单是否超时
	 * 
	 * @param timeOut
	 * @return
	 */
	private Integer isTimeOut(String timeOut) {
		int result = 0;
		if ("超时".equals(timeOut)) {
			result = 1;
		}
		return result;
	}

	/**
	 * 获取工单信息
	 * 
	 * @param orderStatus
	 * @return
	 */
	private Integer getOrderStatus(String orderStatus) {
		int result = 0;
		if (orderStatus.contains("已归档")) {
			result = 1;
		} else if (orderStatus.contains("未归档")) {
			result = 2;
		}
		return result;
	}

	/**
	 * 获取满意度
	 * 
	 * @param satisfaction
	 * @return
	 */
	private Integer getSatisfaction(String satisfaction) {
		// 用户满意情况：1：满意（问题已经解决），2：不满意（问题已经解决），3：不满意（问题未解决）
		int result = 0;
		if (satisfaction.contains("问题已经解决") || satisfaction.contains("故障已解决")) {
			if (satisfaction.contains("不满意"))
				result = 2;
			else
				result = 1;
		} else {
			result = 3;
		}
		return result;
	}

	/**
	 * 获取外呼方式
	 * 
	 * @param way
	 * @return
	 */
	private Integer getCallOutWay(String way) {
		// 外呼方式；1:未外呼，2：自动外呼，3：esales外呼，4：客服电话回访
		int result = 0;
		if ("未外呼".equals(way)||"未回访".equals(way))
			result = 1;
		else if ("自动外呼".equals(way))
			result = 2;
		else if ("esales外呼".equals(way))
			result = 3;
		else if ("客服电话回访".equals(way))
			result = 4;
		return result;
	}

	/**
	 * 批量更新
	 * 
	 * @param repeatList
	 * @return
	 */
	private int updateBatch(List<WorkOrder> repeatList) {
		List<WorkOrder> repeat = new ArrayList<WorkOrder>();
		repeat.addAll(repeatList);
		// 每批次更新数量
		int batchCount = 1000;
		// 批次
		int batchNum = 1;
		for (;;) {
			List<WorkOrder> workOrderList = new ArrayList<WorkOrder>();
			if (batchCount >= repeat.size()) {
				workOrderMapper.updateBatch(repeatList);
				// 一次可全部更新
				break;
			} else {
				// 需要多次更新
				workOrderList = repeat.subList(0, batchCount);
				workOrderMapper.updateBatch(workOrderList);
			}
			repeat.removeAll(workOrderList);
			batchNum++;
		}
		return batchNum;
	}

	/**
	 * 批量插入
	 * 
	 * @param insertList
	 * @return
	 */
	private int insertBatch(List<WorkOrder> insertList) {
		// 每批次插入数量
		int batchCount = 1000;
		// 批次
		int batchNum = 1;
		for (;;) {
			List<WorkOrder> workOrderList = new ArrayList<WorkOrder>();
			if (batchCount >= insertList.size()) {
				workOrderMapper.insertByBatch(insertList);
				// 一次可全部插入
				break;
			} else {
				// 需要多次插入
				workOrderList = insertList.subList(0, batchCount);
				workOrderMapper.insertByBatch(workOrderList);
			}
			insertList.removeAll(workOrderList);
			batchNum++;
		}
		return batchNum;
	}

	/**
	 * 
	 * @Title: getFaultType @Description: TODO 获取故障类型 @param @param
	 *         fault @param @return 参数 @return String 返回类型 @throws
	 */
	private String getFaultType(String fault) {
		String result = "else_fault";
		List<Dict> dicts = dictGroupMapper.selectAllDict();
		for (Dict dict : dicts) {
			if (fault.contains(dict.getName())) {
				DictGroup dictGroup = dictGroupMapper.getById(dict.getDictGroupId());
				result = dictGroup.getGroupCode();
			}
		}
		return result;
	}

	@Override
	public Map<String, Object> getWorkOrderById(String id) {
		WorkOrder order = workOrderMapper.getWorkOrderById(id);
		String name = dictGroupMapper.getDictByCode(order.getFaultType());
		if (ObjectUtil.isNotNull(name)) {
			order.setFaultType(name);
		} else {
			order.setFaultType("其他故障");
		}
		Map<String, Object> resultMap = convertField(order);
		return resultMap;
	}

	@Override
	public WorkOrder getOrderById(String id) {
		return workOrderMapper.getWorkOrderById(id);
	}

	@Override
	public List<Dict> getAreaList() {
		List<Dict> list = dictGroupMapper.selectByPrimaryKey("078457f1e9f64c4ebeb7c08c3b66e08c");
		List<Dict> list2 = dictGroupMapper.selectByPrimaryKey("0ba28352ce624d43a244cba5c827f2b4");
		for (Dict dict : list2) {
			list.add(dict);
		}
		return list;
	}

	@Override
	public List<DateOrder> queryDateOrder() {
		List<DateOrder> result = new ArrayList<DateOrder>();
		List<WorkOrder> list = workOrderMapper.getAllOrder();
		for (int i = 1; i < 13; i++) {
			int count = 0;
			for (WorkOrder workOrder : list) {
				Long createDate = workOrder.getOrderCreateDate();
				SimpleDateFormat sf2 = new SimpleDateFormat("M");
				String format = sf2.format(createDate);
				if (format.equals(i + "")) {
					count++;
				}
			}
			DateOrder dateOrder = new DateOrder();
			dateOrder.setX("2018年" + i + "月");
			dateOrder.setY(count);
			result.add(dateOrder);
		}
		return result;
	}

}
